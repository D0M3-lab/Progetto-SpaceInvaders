import tkinter as tk
import random
import time
from PIL import Image, ImageTk  # Per caricare le immagini

# Dimensioni e velocità
WIDTH, HEIGHT = 500, 700
PLAYER_SPEED = 10
BULLET_SPEED = 7
ENEMY_SPEED = 2
ENEMY_DROP = 20
ENEMY_FIRE_CHANCE = 0.005
ENEMY_BULLET_SPEED = 5
FIRE_DELAY = 350
BARRIER_ROWS = 4
BARRIER_COLS = 6  # blocchi orizzontali per barriera
BARRIER_BLOCK_SIZE = 10  # dimensione blocco barriera
PLAYER_SPRITE_SIZE = 40  # dimensione sprite del giocatore
ENEMY_SPRITE_SIZE = 20   # dimensione sprite dei nemici (più piccoli)

class SpaceInvaders:
    def _init_(self, root):
        self.root = root
        self.canvas = tk.Canvas(root, width=WIDTH, height=HEIGHT, bg='black')
        self.canvas.pack()

        self.score = 0
        self.score_label = tk.Label(root, text="Score: 0", font=("Arial", 14))
        self.score_label.pack()

        self.end_frame = tk.Frame(root, bg='black')
        self.end_label = tk.Label(self.end_frame, text="", font=("Arial", 24, "bold"), fg='white', bg='black')
        self.restart_button = tk.Button(self.end_frame, text="Restart", font=("Arial", 14), command=self.restart_game)

        self.game_over = False
        self.images = {}

        # Crea giocatore
        self.player = self.load_sprite('player.png', WIDTH//2, HEIGHT - 50, PLAYER_SPRITE_SIZE)
        # Crea barriere
        self.barriers = []
        self.create_barriers()
        # Crea elenchi per oggetti
        self.bullets = []
        self.enemy_bullets = []
        self.enemies = []
        self.create_enemies()

        self.enemy_direction = 1
        self.last_shot_time = 0

        # Binding tastiera
        root.bind("<Left>", self.move_left)
        root.bind("<Right>", self.move_right)
        root.bind("<space>", self.shoot)

        self.update_game()

    def load_sprite(self, image_file, x, y, size):
        img = Image.open(image_file).resize((size, size), Image.LANCZOS)
        photo = ImageTk.PhotoImage(img)
        self.images[f"{image_file}_{len(self.images)}"] = photo
        return self.canvas.create_image(x, y, image=photo)

    def create_barriers(self):
        total_w = BARRIER_COLS * BARRIER_BLOCK_SIZE
        spacing = WIDTH // 5
        y0 = HEIGHT - 150
        for i in range(4):
            x0 = spacing*(i+1) - total_w//2
            for r in range(BARRIER_ROWS):
                for c in range(BARRIER_COLS):
                    x = x0 + c*BARRIER_BLOCK_SIZE
                    y = y0 + r*BARRIER_BLOCK_SIZE
                    block = self.canvas.create_rectangle(x, y, x+BARRIER_BLOCK_SIZE, y+BARRIER_BLOCK_SIZE, fill='green', outline='')
                    self.barriers.append(block)

    def create_enemies(self):
        for r in range(5):
            for c in range(7):
                x = 50 + c*50
                y = 60 + r*40
                e = self.load_sprite('enemy.png', x, y, ENEMY_SPRITE_SIZE)
                self.enemies.append(e)

    def move_left(self, event):
        if not self.game_over:
            bbox = self.canvas.bbox(self.player)
            if bbox and bbox[0] > 0:
                self.canvas.move(self.player, -PLAYER_SPEED, 0)

    def move_right(self, event):
        if not self.game_over:
            bbox = self.canvas.bbox(self.player)
            if bbox and bbox[2] < WIDTH:
                self.canvas.move(self.player, PLAYER_SPEED, 0)

    def shoot(self, event):
        if self.game_over:
            return
        now = int(time.time()*1000)
        if now - self.last_shot_time >= FIRE_DELAY:
            bb = self.canvas.bbox(self.player)
            x = (bb[0] + bb[2]) / 2
            y = bb[1]
            b = self.canvas.create_oval(x-3, y-25, x+3, y-10, fill='yellow')
            self.bullets.append(b)
            self.last_shot_time = now

    def update_game(self):
        if self.game_over:
            return
        self.move_player_bullets()
        self.move_enemy_bullets()
        self.move_enemies()
        self.check_enemy_fire()
        self.check_game_over()
        self.root.after(50, self.update_game)

    def move_player_bullets(self):
        for b in self.bullets[:]:
            self.canvas.move(b, 0, -BULLET_SPEED)
            if self.check_offscreen(b):
                continue
            # calcola centro proiettile
            bb_b = self.canvas.bbox(b)
            x = (bb_b[0] + bb_b[2]) / 2
            y = (bb_b[1] + bb_b[3]) / 2
            if self.hit_barrier(b, x, y):
                continue
            for e in self.enemies[:]:
                bb_e = self.canvas.bbox(e)
                if bb_e and bb_e[0] < x < bb_e[2] and bb_e[1] < y < bb_e[3]:
                    self.canvas.delete(e)
                    self.enemies.remove(e)
                    self.canvas.delete(b)
                    self.bullets.remove(b)
                    self.score += 10
                    self.score_label.config(text=f"Score: {self.score}")
                    break

    def move_enemy_bullets(self):
        for b in self.enemy_bullets[:]:
            self.canvas.move(b, 0, ENEMY_BULLET_SPEED)
            if self.check_offscreen(b):
                continue
            bb_b = self.canvas.bbox(b)
            x = (bb_b[0] + bb_b[2]) / 2
            y = (bb_b[1] + bb_b[3]) / 2
            if self.hit_barrier(b, x, y):
                continue
            bb_p = self.canvas.bbox(self.player)
            if bb_p and bb_p[0] < x < bb_p[2] and bb_p[1] < y < bb_p[3]:
                self.canvas.delete(b)
                self.enemy_bullets.remove(b)
                self.end_game("Game Over")
                return

    def check_offscreen(self, b):
        bb = self.canvas.bbox(b)
        if not bb:
            return True
        if bb[3] < 0 or bb[1] > HEIGHT:
            self.canvas.delete(b)
            if b in self.bullets:
                self.bullets.remove(b)
            if b in self.enemy_bullets:
                self.enemy_bullets.remove(b)
            return True
        return False

    def hit_barrier(self, bullet, x, y):
        for block in self.barriers[:]:
            bb = self.canvas.bbox(block)
            if bb and bb[0] < x < bb[2] and bb[1] < y < bb[3]:
                self.canvas.delete(block)
                self.barriers.remove(block)
                self.canvas.delete(bullet)
                if bullet in self.bullets:
                    self.bullets.remove(bullet)
                if bullet in self.enemy_bullets:
                    self.enemy_bullets.remove(bullet)
                return True
        return False

    def move_enemies(self):
        if not self.enemies:
            self.end_game("You Win!")
            return
        xs = [self.canvas.bbox(e)[0] for e in self.enemies if self.canvas.bbox(e)]
        if xs and ((max(xs) > WIDTH-20 and self.enemy_direction == 1) or (min(xs) < 20 and self.enemy_direction == -1)):
            for e in self.enemies:
                self.canvas.move(e, 0, ENEMY_DROP)
            self.enemy_direction *= -1
        else:
            for e in self.enemies:
                self.canvas.move(e, ENEMY_SPEED*self.enemy_direction, 0)

    def check_enemy_fire(self):
        for e in self.enemies:
            bb = self.canvas.bbox(e)
            if bb and random.random() < ENEMY_FIRE_CHANCE:
                x = (bb[0] + bb[2]) / 2
                y = bb[3]
                b = self.canvas.create_oval(x-3, y, x+3, y+15, fill='red')
                self.enemy_bullets.append(b)

    def check_game_over(self):
        for e in self.enemies:
            bb = self.canvas.bbox(e)
            if bb and bb[3] > HEIGHT - 80:
                self.end_game("Game Over")
                return

    def end_game(self, msg):
        self.game_over = True
        self.canvas.delete("all")
        self.score_label.config(text="Score: 0")
        self.end_label.config(text=msg)
        self.end_label.pack(pady=10)
        self.restart_button.pack()
        self.end_frame.place(relx=0.5, rely=0.5, anchor='center')

    def restart_game(self):
        self.end_frame.place_forget()
        self.canvas.delete("all")
        self.bullets.clear()
        self.enemy_bullets.clear()
        self.enemies.clear()
        self.barriers.clear()
        self.score = 0
        self.score_label.config(text="Score: 0")
        self.game_over = False
        self.enemy_direction = 1
        self.last_shot_time = 0
        self.player = self.load_sprite('player.png', WIDTH//2, HEIGHT - 50, PLAYER_SPRITE_SIZE)
        self.create_barriers()
        self.create_enemies()
        self.update_game()

if _name_ == "_main_":
    root = tk.Tk()
    root.title("Space Invaders con Sprite e Barriere")
    game = SpaceInvaders(root)
    root.mainloop()
